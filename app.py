import streamlit as st
import pandas as pd
import os
from docx import Document
from docx.shared import Pt, Inches, Twips
from datetime import datetime
import base64
from io import BytesIO
from lxml import etree

# Set page configuration
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏≥‡∏à‡∏±‡∏ö",
    page_icon="üí∞",
    layout="centered"
)

# Add custom CSS
st.markdown("""
<style>
    .main {
        padding: 20px;
    }
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    h1, h2, h3 {
        color: #1E3A8A;
    }
    .stButton>button {
        background-color: #1E3A8A;
        color: white;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #2563EB;
    }
    .info-box {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    .result-box {
        background-color: #e2f0d9;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
    }
</style>
""", unsafe_allow_html=True)

# Function to load max fine share data
@st.cache_data
def load_max_fine_data():
    # Try different encodings to handle Thai characters
    encodings = ['utf-8-sig', 'utf-8', 'cp874', 'tis-620', 'windows-874']
    
    # Check if file exists
    if not os.path.exists("max_fine_shares.csv"):
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå max_fine_shares.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô")
        return pd.DataFrame(columns=["‡∏û.‡∏£.‡∏ö.", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î"])
    
    for encoding in encodings:
        try:
            df = pd.read_csv("max_fine_shares.csv", encoding=encoding)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö)
            required_columns = ["‡∏û.‡∏£.‡∏ö.", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"]
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏≤‡∏à‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà encoding ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if not all(col in df.columns for col in required_columns):
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
                # st.warning(f"‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {df.columns.tolist()} (encoding: {encoding}) - ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
                continue
                
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î' ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'] = pd.to_numeric(df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'], errors='coerce')
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
            if "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î" not in df.columns:
                df["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î"] = ""
                
            # ‡πÑ‡∏°‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏°‡∏≤‡∏ï‡∏£‡∏≤' ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
            # ‡πÄ‡∏ä‡πà‡∏ô "‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 16", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 20 ‡∏ß‡∏£‡∏£‡∏Ñ‡∏™‡∏≠‡∏á" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NaN ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            if df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'].isna().any():
                # st.warning(f"‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ NaN ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (encoding: {encoding}) - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                pass
            
            # ‡∏´‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            return df
            
        except UnicodeDecodeError:
            continue
        except Exception as e:
            # st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e} (encoding: {encoding})")
            pass
    
    # ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å encoding ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ encoding")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    # st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô...")
    sample_data = {
        "‡∏û.‡∏£.‡∏ö.": ["‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏ó‡∏≤‡∏á‡∏ö‡∏Å", "‡∏à‡∏£‡∏≤‡∏à‡∏£‡∏ó‡∏≤‡∏á‡∏ö‡∏Å", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"],
        "‡∏°‡∏≤‡∏ï‡∏£‡∏≤": ["‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 5", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 7", "‡∏°‡∏≤‡∏ï‡∏£‡∏≤ 56"],
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î": [2000, 3000, 4000]
    }
    return pd.DataFrame(sample_data)

# Function to create and download Word document
def create_word_document(data):
    doc = Document()
    
    # Set page width for the document (A4)
    section = doc.sections[0]
    section.page_width = Inches(8.27)  # A4 width
    section.page_height = Inches(11.69)  # A4 height
    
    # Add XML parser function
    def parse_xml(xml_string):
        return etree.fromstring(xml_string)
    
    # Set font for the entire document
    style = doc.styles['Normal']
    style.font.name = 'TH SarabunPSK'
    style.font.size = Pt(16)
    
    # Add document heading with proper formatting
    title = doc.add_heading("", level=0)
    title_run = title.add_run("‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö")
    title_run.font.name = 'TH SarabunPSK'
    title_run.font.size = Pt(20)
    title_run.font.bold = True
    title.alignment = 1  # Center alignment

    # Add department info (right-aligned)
    header_para1 = doc.add_paragraph()
    header_para1.alignment = 2  # Right alignment
    header_run1 = header_para1.add_run("‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£")
    header_run1.font.name = 'TH SarabunPSK'
    header_run1.font.size = Pt(16)

    # Add address (right-aligned)
    header_para2 = doc.add_paragraph()
    header_para2.alignment = 2  # Right alignment
    header_run2 = header_para2.add_run("‡πë‡πô ‡∏ã‡∏≠‡∏¢ ‡πì‡πï ‡∏≠‡∏±‡∏®‡∏ß‡∏ô‡∏ô‡∏ó‡πå ‡πí ‡∏™‡∏õ ‡πë‡πê‡πí‡πó‡πê")
    header_run2.font.name = 'TH SarabunPSK'
    header_run2.font.size = Pt(16)

    # Add date field (right-aligned)
    header_para3 = doc.add_paragraph()
    header_para3.alignment = 2  # Right alignment
    header_run3 = header_para3.add_run("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà.....................................................")
    header_run3.font.name = 'TH SarabunPSK'
    header_run3.font.size = Pt(16)

    # Add blank space
    doc.add_paragraph()

    # Add recipient line
    recipient_para = doc.add_paragraph()
    recipient_para.add_run("‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£")
    recipient_para.alignment = 0  # Left alignment

    # Add money receipt line
    receipt_from_para = doc.add_paragraph()
    receipt_from_para.add_run("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å.............................................................................")
    receipt_from_para.alignment = 0  # Left alignment


    
    # Add fine amount
    amount_para = doc.add_paragraph()
    amount_text = f"*‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° {data['fine_amount']:,.2f} ‡∏ö‡∏≤‡∏ó ({convert_to_thai_text(data['fine_amount'])})"
    amount_para.add_run(amount_text).bold = True
    
    # Add law info
    law_para = doc.add_paragraph()
    law_text = f"‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö ‡∏ï‡∏≤‡∏°‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥{data['law']} ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    law_para.add_run(law_text)
    
    # Add offense description
    offense_para = doc.add_paragraph()
    if "offense" in data and data["offense"]:
        offense_text = f"‡∏Ç‡πâ‡∏≠‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î    {data['offense']} ‡∏°‡∏µ‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©‡∏ï‡∏≤‡∏° {data['section']}"
    else:
        offense_text = f"‡∏Ç‡πâ‡∏≠‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î    ................................................ ‡∏°‡∏µ‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏≤ {data['section']}"
    offense_para.add_run(offense_text)
    
    # Create a table for the fine calculation (2 columns, 8 rows)
    fine_table = doc.add_table(rows=8, cols=2)
    fine_table.style = 'Table Grid'
    fine_table.autofit = False
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á 50% ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
    fine_table._element.tblPr.xpath('./w:tblW')[0].set('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}w', '2500')
    fine_table._element.tblPr.xpath('./w:tblW')[0].set('{http://schemas.openxmlformats.org/wordprocessingml/2006/main}type', 'pct')
    
    # ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    tblBorders = parse_xml("""
    <w:tblBorders xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
      <w:top w:val="single" w:sz="4" w:space="0" w:color="auto"/>
      <w:left w:val="single" w:sz="4" w:space="0" w:color="auto"/>
      <w:bottom w:val="single" w:sz="4" w:space="0" w:color="auto"/>
      <w:right w:val="single" w:sz="4" w:space="0" w:color="auto"/>
      <w:insideH w:val="nil"/>
      <w:insideV w:val="nil"/>
    </w:tblBorders>
    """)
    
    # ‡∏î‡∏∂‡∏á tblPr element
    tblPr = fine_table._element.xpath('./w:tblPr')[0]
    # ‡∏•‡∏ö tblBorders ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    for element in tblPr.xpath('./w:tblBorders'):
        tblPr.remove(element)
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° tblBorders ‡πÉ‡∏´‡∏°‡πà
    tblPr.append(tblBorders)
    
    # Add the box title
    fine_box_cell = fine_table.cell(0, 0)
    fine_box_cell.merge(fine_table.cell(0, 1))
    fine_box_para = fine_box_cell.paragraphs[0]
    fine_box_para.add_run(f"‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô...60...%*").bold = True
    fine_box_para.alignment = 1  # Center
    
    # Add calculation rows
    fine_table.cell(1, 0).text = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
    fine_table.cell(1, 1).text = f"{data['calculated_share']:,.2f} ‡∏ö‡∏≤‡∏ó"
    
    fine_table.cell(2, 0).text = "‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô"
    fine_table.cell(2, 1).text = f"{data['max_share']:,.2f} ‡∏ö‡∏≤‡∏ó"
    
    fine_table.cell(3, 0).text = "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏¥‡∏ô‡∏ö‡∏ô‡∏ô‡∏≥‡∏à‡∏±‡∏ö"
    fine_table.cell(3, 1).text = f"{data['share1']:,.2f} ‡∏ö‡∏≤‡∏ó(15 %*)"
    
    # Add checkboxes in a single cell spanning 2 columns
    check_cell = fine_table.cell(4, 0)
    check_cell.merge(fine_table.cell(4, 1))
    check_para = check_cell.paragraphs[0]
    check_para.add_run("‚ñ° ‡∏à‡πà‡∏≤‡∏¢")
    
    check_cell2 = fine_table.cell(5, 0)
    check_cell2.merge(fine_table.cell(5, 1))
    check_para2 = check_cell2.paragraphs[0]
    check_para2.add_run("‚ñ° ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô")
    
    # Add reward and expense rows
    fine_table.cell(6, 0).text = "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
    fine_table.cell(6, 1).text = f"{data['share2']:,.2f} ‡∏ö‡∏≤‡∏ó(30 %*)"
    
    fine_table.cell(7, 0).text = "‡∏Ñ‡∏ä‡∏à."
    fine_table.cell(7, 1).text = f"{data['share3']:,.2f} ‡∏ö‡∏≤‡∏ó(15 %*)"
    
    # Set font for all cells
    for row in fine_table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.size = Pt(14)
                    run.font.name = 'TH SarabunPSK'
                paragraph.alignment = 1  # Center align
    
    # Add signature section
    doc.add_paragraph()
    sig_section = doc.add_paragraph()
    sig_section.alignment = 2  # Right alignment
    sig_section.add_run("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞.........................................\n")
    sig_section.add_run("‡πÇ‡∏ó‡∏£ ................................................")
    
    # Save to BytesIO object
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# Function to convert number to Thai text
def convert_to_thai_text(number):
    # A simple implementation to convert numbers to Thai text
    # This is a basic implementation and might need more sophistication for real use
    
    if number == 0:
        return "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏≤‡∏ó‡∏ñ‡πâ‡∏ß‡∏ô"
    
    # Split into integer and decimal parts
    integer_part = int(number)
    decimal_part = int(round((number - integer_part) * 100))
    
    # Thai digits
    thai_digits = ["", "‡∏´‡∏ô‡∏∂‡πà‡∏á", "‡∏™‡∏≠‡∏á", "‡∏™‡∏≤‡∏°", "‡∏™‡∏µ‡πà", "‡∏´‡πâ‡∏≤", "‡∏´‡∏Å", "‡πÄ‡∏à‡πá‡∏î", "‡πÅ‡∏õ‡∏î", "‡πÄ‡∏Å‡πâ‡∏≤"]
    
    # Thai units
    thai_units = ["", "‡∏™‡∏¥‡∏ö", "‡∏£‡πâ‡∏≠‡∏¢", "‡∏û‡∏±‡∏ô", "‡∏´‡∏°‡∏∑‡πà‡∏ô", "‡πÅ‡∏™‡∏ô", "‡∏•‡πâ‡∏≤‡∏ô"]
    
    # Convert integer part
    result = ""
    
    if integer_part >= 1000000:
        millions = integer_part // 1000000
        result += convert_to_thai_text(millions) + "‡∏•‡πâ‡∏≤‡∏ô"
        integer_part %= 1000000
    
    # Process each digit
    digits = [int(d) for d in str(integer_part)]
    length = len(digits)
    
    for i in range(length):
        digit = digits[i]
        if digit == 0:
            continue
            
        if i == length - 1 and digit == 1 and length > 1:
            result += "‡πÄ‡∏≠‡πá‡∏î"
        elif i == length - 2 and digit == 2:
            result += "‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö"
        elif i == length - 2 and digit == 1:
            result += "‡∏™‡∏¥‡∏ö"
        else:
            result += thai_digits[digit] + thai_units[length - i - 1]
    
    # Add "baht"
    result += "‡∏ö‡∏≤‡∏ó"
    
    # Add decimal part if exists
    if decimal_part > 0:
        if decimal_part < 10:
            result += thai_digits[decimal_part] + "‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
        else:
            tens = decimal_part // 10
            ones = decimal_part % 10
            
            if tens == 2:
                result += "‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö"
            elif tens == 1:
                result += "‡∏™‡∏¥‡∏ö"
            else:
                result += thai_digits[tens] + "‡∏™‡∏¥‡∏ö"
                
            if ones == 1:
                result += "‡πÄ‡∏≠‡πá‡∏î‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
            elif ones > 0:
                result += thai_digits[ones] + "‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
            else:
                result += "‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
    else:
        result += "‡∏ñ‡πâ‡∏ß‡∏ô"
        
    return result

# Function to get download link for docx
def get_download_link(buffer, filename="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏≥‡∏à‡∏±‡∏ö.docx"):
    b64 = base64.b64encode(buffer.getvalue()).decode()
    return f'<a href="data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,{b64}" download="{filename}">üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Word</a>'

# Main function
def main():
    st.title("üí∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏≥‡∏à‡∏±‡∏ö")
    
    # Load max fine share data
    max_fine_data = load_max_fine_data()
    
    # Get unique laws from the data
    laws = ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å..."] + max_fine_data["‡∏û.‡∏£.‡∏ö."].unique().tolist()

    with st.container():
        st.markdown('<div class="info-box">', unsafe_allow_html=True)
        st.subheader("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á")
        
        # Input for fine amount
        fine_amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡∏ö‡∏≤‡∏ó)", min_value=0, value=None, step=100, placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
        
        # Select law
        selected_law = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥", laws)
        
        # Filter sections based on selected law
        if selected_law == "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...":
            sections = ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å..."]
            filtered_sections = pd.DataFrame(columns=max_fine_data.columns)
        else:
            filtered_sections = max_fine_data[max_fine_data["‡∏û.‡∏£.‡∏ö."] == selected_law]
            sections = ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å..."] + filtered_sections["‡∏°‡∏≤‡∏ï‡∏£‡∏≤"].tolist()
        
        # Select section
        selected_section = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©", sections)
        
        # Get offense information if available
        offense_info = ""
        if selected_section != "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å..." and selected_law != "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...":
            selected_row = filtered_sections[filtered_sections["‡∏°‡∏≤‡∏ï‡∏£‡∏≤"] == selected_section]
            if not selected_row.empty and "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î" in selected_row.columns:
                offense_info = selected_row["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î"].values[0]
                if pd.notna(offense_info) and offense_info:
                    st.info(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î**: {offense_info}")

        st.markdown('</div>', unsafe_allow_html=True)
        
        # Calculate button
        if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á"):
            if fine_amount is None or fine_amount <= 0:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó")
            elif selected_law == "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥")
            elif selected_section == "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...":
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©")
            else:
                # Calculate 60% of fine
                calculated_share = fine_amount * 0.6
                
                # Get maximum share for selected law and section
                max_share_row = filtered_sections[filtered_sections["‡∏°‡∏≤‡∏ï‡∏£‡∏≤"] == selected_section]
                if max_share_row.empty or pd.isna(max_share_row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].values[0]):
                    st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏û.‡∏£.‡∏ö. {selected_law} ‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏© {selected_section}")
                    max_share = 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0
                else:
                    max_share = max_share_row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"].values[0]
                
                # Determine actual share amount
                actual_share = min(calculated_share, float(max_share))
                
                # Calculate distribution
                share1 = actual_share * 0.25  # 25% - ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏¥‡∏ô‡∏ö‡∏ô‡∏ô‡∏≥‡∏à‡∏±‡∏ö
                share2 = actual_share * 0.50  # 50% - ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                share3 = actual_share * 0.25  # 25% - ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
                
                # Display results
                st.markdown('<div class="result-box">', unsafe_allow_html=True)
                st.subheader("üíµ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö: **{fine_amount:,.2f}** ‡∏ö‡∏≤‡∏ó")
                    st.write(f"‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ (60%): **{calculated_share:,.2f}** ‡∏ö‡∏≤‡∏ó")
                    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©: **{max_share:,.2f}** ‡∏ö‡∏≤‡∏ó")
                
                with col2:
                    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á: **{actual_share:,.2f}** ‡∏ö‡∏≤‡∏ó")
                    st.write(f"‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ö‡∏±‡∏ç‡∏ç‡∏±‡∏ï‡∏¥: **{selected_law}**")
                    st.write(f"‡∏ö‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ó‡∏©: **{selected_section}**")
                
                st.markdown("---")
                st.subheader("üîÑ ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏≥‡∏à‡∏±‡∏ö")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1 (25%) ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏¥‡∏ô‡∏ö‡∏ô‡∏ô‡∏≥‡∏à‡∏±‡∏ö", f"{share1:,.2f} ‡∏ö‡∏≤‡∏ó")
                
                with col2:
                    st.metric("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2 (50%) ‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", f"{share2:,.2f} ‡∏ö‡∏≤‡∏ó")
                
                with col3:
                    st.metric("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3 (25%) ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", f"{share3:,.2f} ‡∏ö‡∏≤‡∏ó")
                
                st.markdown("---")
                
                # Create Word document
                data = {
                    "law": selected_law,
                    "section": selected_section,
                    "fine_amount": fine_amount,
                    "max_share": max_share,
                    "calculated_share": calculated_share,
                    "actual_share": actual_share,
                    "share1": share1,
                    "share2": share2,
                    "share3": share3
                }
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                if "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î" in max_share_row.columns and not max_share_row.empty:
                    offense_text = max_share_row["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î"].values[0]
                    if pd.notna(offense_text) and offense_text:
                        data["offense"] = offense_text
                    else:
                        data["offense"] = ""
                else:
                    data["offense"] = ""
                
                buffer = create_word_document(data)
                
                # Provide download link
                st.markdown(get_download_link(buffer), unsafe_allow_html=True)
                
                st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main() 